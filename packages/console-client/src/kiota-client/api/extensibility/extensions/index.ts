/* eslint-disable @typescript-eslint/ban-tslint-comment */
/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Extensions_routes_icon}
 */
export function createExtensions_routes_iconFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExtensions_routes_icon;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Extensions_routes_labelIntl}
 */
export function createExtensions_routes_labelIntlFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExtensions_routes_labelIntl;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Extensions_routes}
 */
export function createExtensions_routesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExtensions_routes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Extensions400Error}
 */
export function createExtensions400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExtensions400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Extensions500Error}
 */
export function createExtensions500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExtensions500Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Extensions}
 */
export function createExtensionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExtensions;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoExtensions(extensions: Partial<Extensions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "entry": n => { extensions.entry = n.getStringValue(); },
        "microfrontendId": n => { extensions.microfrontendId = n.getStringValue(); },
        "routes": n => { extensions.routes = n.getCollectionOfObjectValues<Extensions_routes>(createExtensions_routesFromDiscriminatorValue); },
        "type": n => { extensions.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoExtensions_routes(extensions_routes: Partial<Extensions_routes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "destinationPath": n => { extensions_routes.destinationPath = n.getStringValue(); },
        "icon": n => { extensions_routes.icon = n.getObjectValue<Extensions_routes_icon>(createExtensions_routes_iconFromDiscriminatorValue); },
        "id": n => { extensions_routes.id = n.getStringValue(); },
        "labelIntl": n => { extensions_routes.labelIntl = n.getObjectValue<Extensions_routes_labelIntl>(createExtensions_routes_labelIntlFromDiscriminatorValue); },
        "locationId": n => { extensions_routes.locationId = n.getEnumValue<Extensions_routes_locationId>(Extensions_routes_locationIdObject); },
        "matchExactMountPath": n => { extensions_routes.matchExactMountPath = n.getBooleanValue(); },
        "order": n => { extensions_routes.order = n.getNumberValue(); },
        "parentId": n => { extensions_routes.parentId = n.getStringValue(); },
        "renderType": n => { extensions_routes.renderType = n.getEnumValue<Extensions_routes_renderType>(Extensions_routes_renderTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoExtensions_routes_icon(extensions_routes_icon: Partial<Extensions_routes_icon> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { extensions_routes_icon.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoExtensions_routes_labelIntl(extensions_routes_labelIntl: Partial<Extensions_routes_labelIntl> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoExtensions400Error(extensions400Error: Partial<Extensions400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { extensions400Error.errorEscaped = n.getStringValue(); },
        "message": n => { extensions400Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { extensions400Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoExtensions500Error(extensions500Error: Partial<Extensions500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { extensions500Error.errorEscaped = n.getStringValue(); },
        "message": n => { extensions500Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { extensions500Error.statusCode = n.getNumberValue(); },
    }
}
export interface Extensions extends Parsable {
    /**
     * The entry property
     */
    entry?: string;
    /**
     * The microfrontendId property
     */
    microfrontendId?: string;
    /**
     * The routes property
     */
    routes?: Extensions_routes[];
    /**
     * The type property
     */
    type?: string;
}
export interface Extensions_routes extends Parsable {
    /**
     * The destinationPath property
     */
    destinationPath?: string;
    /**
     * The icon property
     */
    icon?: Extensions_routes_icon;
    /**
     * The id property
     */
    id?: string;
    /**
     * The labelIntl property
     */
    labelIntl?: Extensions_routes_labelIntl;
    /**
     * The locationId property
     */
    locationId?: Extensions_routes_locationId;
    /**
     * The matchExactMountPath property
     */
    matchExactMountPath?: boolean;
    /**
     * The order property
     */
    order?: number;
    /**
     * The parentId property
     */
    parentId?: string;
    /**
     * The renderType property
     */
    renderType?: Extensions_routes_renderType;
}
export interface Extensions_routes_icon extends Parsable {
    /**
     * The name property
     */
    name?: string;
}
export interface Extensions_routes_labelIntl extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export type Extensions_routes_locationId = (typeof Extensions_routes_locationIdObject)[keyof typeof Extensions_routes_locationIdObject];
export type Extensions_routes_renderType = (typeof Extensions_routes_renderTypeObject)[keyof typeof Extensions_routes_renderTypeObject];
export interface Extensions400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string;
    /**
     * The message property
     */
    messageEscaped?: string;
    /**
     * The statusCode property
     */
    statusCode?: number;
}
export interface Extensions500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string;
    /**
     * The message property
     */
    messageEscaped?: string;
    /**
     * The statusCode property
     */
    statusCode?: number;
}
/**
 * Builds and executes requests for operations under /api/extensibility/extensions
 */
export interface ExtensionsRequestBuilder extends BaseRequestBuilder<ExtensionsRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Extensions[]>}
     * @throws {Extensions400Error} error when the service returns a 400 status code
     * @throws {Extensions500Error} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters> | undefined) : Promise<Extensions[] | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ExtensionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
export interface ExtensionsRequestBuilderGetQueryParameters {
    projectId?: string;
    tenantId?: string;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeExtensions(writer: SerializationWriter, extensions: Partial<Extensions> | undefined = {}) : void {
    writer.writeStringValue("entry", extensions.entry);
    writer.writeStringValue("microfrontendId", extensions.microfrontendId);
    writer.writeCollectionOfObjectValues<Extensions_routes>("routes", extensions.routes, serializeExtensions_routes);
    writer.writeStringValue("type", extensions.type);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeExtensions_routes(writer: SerializationWriter, extensions_routes: Partial<Extensions_routes> | undefined = {}) : void {
    writer.writeStringValue("destinationPath", extensions_routes.destinationPath);
    writer.writeObjectValue<Extensions_routes_icon>("icon", extensions_routes.icon, serializeExtensions_routes_icon);
    writer.writeStringValue("id", extensions_routes.id);
    writer.writeObjectValue<Extensions_routes_labelIntl>("labelIntl", extensions_routes.labelIntl, serializeExtensions_routes_labelIntl);
    writer.writeEnumValue<Extensions_routes_locationId>("locationId", extensions_routes.locationId);
    writer.writeBooleanValue("matchExactMountPath", extensions_routes.matchExactMountPath);
    writer.writeNumberValue("order", extensions_routes.order);
    writer.writeStringValue("parentId", extensions_routes.parentId);
    writer.writeEnumValue<Extensions_routes_renderType>("renderType", extensions_routes.renderType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeExtensions_routes_icon(writer: SerializationWriter, extensions_routes_icon: Partial<Extensions_routes_icon> | undefined = {}) : void {
    writer.writeStringValue("name", extensions_routes_icon.name);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeExtensions_routes_labelIntl(writer: SerializationWriter, extensions_routes_labelIntl: Partial<Extensions_routes_labelIntl> | undefined = {}) : void {
    writer.writeAdditionalData(extensions_routes_labelIntl.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeExtensions400Error(writer: SerializationWriter, extensions400Error: Partial<Extensions400Error> | undefined = {}) : void {
    writer.writeStringValue("error", extensions400Error.errorEscaped);
    writer.writeStringValue("message", extensions400Error.messageEscaped);
    writer.writeNumberValue("statusCode", extensions400Error.statusCode);
    writer.writeAdditionalData(extensions400Error.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeExtensions500Error(writer: SerializationWriter, extensions500Error: Partial<Extensions500Error> | undefined = {}) : void {
    writer.writeStringValue("error", extensions500Error.errorEscaped);
    writer.writeStringValue("message", extensions500Error.messageEscaped);
    writer.writeNumberValue("statusCode", extensions500Error.statusCode);
    writer.writeAdditionalData(extensions500Error.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ExtensionsRequestBuilderUriTemplate = "{+baseurl}/api/extensibility/extensions{?projectId*,tenantId*}";
export const Extensions_routes_locationIdObject = {
    Tenant: "tenant",
    Project: "project",
    Runtime: "runtime",
} as const;
export const Extensions_routes_renderTypeObject = {
    Category: "category",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const ExtensionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ExtensionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createExtensions400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createExtensions500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createExtensionsFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
