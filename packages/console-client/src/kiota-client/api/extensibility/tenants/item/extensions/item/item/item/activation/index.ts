/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Activation400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string;
    /**
     * The message property
     */
    messageEscaped?: string;
    /**
     * The statusCode property
     */
    statusCode?: number;
}
export interface Activation500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string;
    /**
     * The message property
     */
    messageEscaped?: string;
    /**
     * The statusCode property
     */
    statusCode?: number;
}
/**
 * Builds and executes requests for operations under /api/extensibility/tenants/{tenantId}/extensions/{extensionId}/{contextType}/{contextId}/activation
 */
export interface ActivationRequestBuilder extends BaseRequestBuilder<ActivationRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {Activation400Error} error when the service returns a 400 status code
     * @throws {Activation500Error} error when the service returns a 500 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Activation400Error}
 */
export function createActivation400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActivation400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Activation500Error}
 */
export function createActivation500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoActivation500Error;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoActivation400Error(activation400Error: Partial<Activation400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { activation400Error.errorEscaped = n.getStringValue(); },
        "message": n => { activation400Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { activation400Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoActivation500Error(activation500Error: Partial<Activation500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { activation500Error.errorEscaped = n.getStringValue(); },
        "message": n => { activation500Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { activation500Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeActivation400Error(writer: SerializationWriter, activation400Error: Partial<Activation400Error> | undefined = {}) : void {
    writer.writeStringValue("error", activation400Error.errorEscaped);
    writer.writeStringValue("message", activation400Error.messageEscaped);
    writer.writeNumberValue("statusCode", activation400Error.statusCode);
    writer.writeAdditionalData(activation400Error.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeActivation500Error(writer: SerializationWriter, activation500Error: Partial<Activation500Error> | undefined = {}) : void {
    writer.writeStringValue("error", activation500Error.errorEscaped);
    writer.writeStringValue("message", activation500Error.messageEscaped);
    writer.writeNumberValue("statusCode", activation500Error.statusCode);
    writer.writeAdditionalData(activation500Error.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ActivationRequestBuilderUriTemplate = "{+baseurl}/api/extensibility/tenants/{tenantId}/extensions/{extensionId}/{contextType}/{contextId}/activation";
/**
 * Metadata for all the requests in the request builder.
 */
export const ActivationRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ActivationRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createActivation400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createActivation500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
};
/* tslint:enable */
/* eslint-enable */
