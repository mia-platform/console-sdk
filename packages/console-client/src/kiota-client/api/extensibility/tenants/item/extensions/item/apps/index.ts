/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type WithAppItemRequestBuilder, WithAppItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Apps400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface Apps500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface AppsPostRequestBody extends Parsable {
    /**
     * The callbackUrl property
     */
    callbackUrl?: string | null;
}
export interface AppsPostResponse extends Parsable {
    /**
     * The id property
     */
    id?: string | null;
}
/**
 * Builds and executes requests for operations under /api/extensibility/tenants/{tenantId}/extensions/{extensionId}/apps
 */
export interface AppsRequestBuilder extends BaseRequestBuilder<AppsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.extensibility.tenants.item.extensions.item.apps.item collection
     * @param appId Unique identifier of the item
     * @returns {WithAppItemRequestBuilder}
     */
     byAppId(appId: string) : WithAppItemRequestBuilder;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AppsPostResponse>}
     * @throws {Apps400Error} error when the service returns a 400 status code
     * @throws {Apps500Error} error when the service returns a 500 status code
     */
     post(body: AppsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AppsPostResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AppsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Apps400Error}
 */
// @ts-ignore
export function createApps400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoApps400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Apps500Error}
 */
// @ts-ignore
export function createApps500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoApps500Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AppsPostRequestBody}
 */
// @ts-ignore
export function createAppsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAppsPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AppsPostResponse}
 */
// @ts-ignore
export function createAppsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAppsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoApps400Error(apps400Error: Partial<Apps400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { apps400Error.errorEscaped = n.getStringValue(); },
        "message": n => { apps400Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { apps400Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoApps500Error(apps500Error: Partial<Apps500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { apps500Error.errorEscaped = n.getStringValue(); },
        "message": n => { apps500Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { apps500Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAppsPostRequestBody(appsPostRequestBody: Partial<AppsPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "callbackUrl": n => { appsPostRequestBody.callbackUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAppsPostResponse(appsPostResponse: Partial<AppsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { appsPostResponse.id = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeApps400Error(writer: SerializationWriter, apps400Error: Partial<Apps400Error> | undefined | null = {}) : void {
    if (apps400Error) {
        writer.writeStringValue("error", apps400Error.errorEscaped);
        writer.writeStringValue("message", apps400Error.messageEscaped);
        writer.writeNumberValue("statusCode", apps400Error.statusCode);
        writer.writeAdditionalData(apps400Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeApps500Error(writer: SerializationWriter, apps500Error: Partial<Apps500Error> | undefined | null = {}) : void {
    if (apps500Error) {
        writer.writeStringValue("error", apps500Error.errorEscaped);
        writer.writeStringValue("message", apps500Error.messageEscaped);
        writer.writeNumberValue("statusCode", apps500Error.statusCode);
        writer.writeAdditionalData(apps500Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAppsPostRequestBody(writer: SerializationWriter, appsPostRequestBody: Partial<AppsPostRequestBody> | undefined | null = {}) : void {
    if (appsPostRequestBody) {
        writer.writeStringValue("callbackUrl", appsPostRequestBody.callbackUrl);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAppsPostResponse(writer: SerializationWriter, appsPostResponse: Partial<AppsPostResponse> | undefined | null = {}) : void {
    if (appsPostResponse) {
        writer.writeStringValue("id", appsPostResponse.id);
    }
}
/**
 * Uri template for the request builder.
 */
export const AppsRequestBuilderUriTemplate = "{+baseurl}/api/extensibility/tenants/{tenantId}/extensions/{extensionId}/apps";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AppsRequestBuilderNavigationMetadata: Record<Exclude<keyof AppsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAppId: {
        requestsMetadata: WithAppItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["appId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AppsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: AppsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createApps400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createApps500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAppsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAppsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
