/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithApp400Error}
 */
// @ts-ignore
export function createWithApp400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithApp400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithApp500Error}
 */
// @ts-ignore
export function createWithApp500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithApp500Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAppPatchRequestBody}
 */
// @ts-ignore
export function createWithAppPatchRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAppPatchRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithAppPatchResponse}
 */
// @ts-ignore
export function createWithAppPatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithAppPatchResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithApp400Error(withApp400Error: Partial<WithApp400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { withApp400Error.errorEscaped = n.getStringValue(); },
        "message": n => { withApp400Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { withApp400Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithApp500Error(withApp500Error: Partial<WithApp500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { withApp500Error.errorEscaped = n.getStringValue(); },
        "message": n => { withApp500Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { withApp500Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAppPatchRequestBody(withAppPatchRequestBody: Partial<WithAppPatchRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "callbackUrl": n => { withAppPatchRequestBody.callbackUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithAppPatchResponse(withAppPatchResponse: Partial<WithAppPatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { withAppPatchResponse.id = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithApp400Error(writer: SerializationWriter, withApp400Error: Partial<WithApp400Error> | undefined | null = {}) : void {
    if (withApp400Error) {
        writer.writeStringValue("error", withApp400Error.errorEscaped);
        writer.writeStringValue("message", withApp400Error.messageEscaped);
        writer.writeNumberValue("statusCode", withApp400Error.statusCode);
        writer.writeAdditionalData(withApp400Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithApp500Error(writer: SerializationWriter, withApp500Error: Partial<WithApp500Error> | undefined | null = {}) : void {
    if (withApp500Error) {
        writer.writeStringValue("error", withApp500Error.errorEscaped);
        writer.writeStringValue("message", withApp500Error.messageEscaped);
        writer.writeNumberValue("statusCode", withApp500Error.statusCode);
        writer.writeAdditionalData(withApp500Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAppPatchRequestBody(writer: SerializationWriter, withAppPatchRequestBody: Partial<WithAppPatchRequestBody> | undefined | null = {}) : void {
    if (withAppPatchRequestBody) {
        writer.writeStringValue("callbackUrl", withAppPatchRequestBody.callbackUrl);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithAppPatchResponse(writer: SerializationWriter, withAppPatchResponse: Partial<WithAppPatchResponse> | undefined | null = {}) : void {
    if (withAppPatchResponse) {
        writer.writeStringValue("id", withAppPatchResponse.id);
    }
}
export interface WithApp400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface WithApp500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
/**
 * Builds and executes requests for operations under /api/extensibility/tenants/{tenantId}/extensions/{extensionId}/apps/{appId}
 */
export interface WithAppItemRequestBuilder extends BaseRequestBuilder<WithAppItemRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {WithApp400Error} error when the service returns a 400 status code
     * @throws {WithApp500Error} error when the service returns a 500 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WithAppPatchResponse>}
     * @throws {WithApp400Error} error when the service returns a 400 status code
     * @throws {WithApp500Error} error when the service returns a 500 status code
     */
     patch(body: WithAppPatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WithAppPatchResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: WithAppPatchRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithAppPatchRequestBody extends Parsable {
    /**
     * The callbackUrl property
     */
    callbackUrl?: string | null;
}
export interface WithAppPatchResponse extends Parsable {
    /**
     * The id property
     */
    id?: string | null;
}
/**
 * Uri template for the request builder.
 */
export const WithAppItemRequestBuilderUriTemplate = "{+baseurl}/api/extensibility/tenants/{tenantId}/extensions/{extensionId}/apps/{appId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithAppItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithAppItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createWithApp400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createWithApp500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    patch: {
        uriTemplate: WithAppItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createWithApp400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createWithApp500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWithAppPatchResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWithAppPatchRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
