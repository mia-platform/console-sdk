/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Proxy400Error}
 */
// @ts-ignore
export function createProxy400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProxy400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Proxy500Error}
 */
// @ts-ignore
export function createProxy500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProxy500Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProxyPostRequestBody}
 */
// @ts-ignore
export function createProxyPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProxyPostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProxyPostResponse}
 */
// @ts-ignore
export function createProxyPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProxyPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProxy400Error(proxy400Error: Partial<Proxy400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { proxy400Error.errorEscaped = n.getStringValue(); },
        "message": n => { proxy400Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { proxy400Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProxy500Error(proxy500Error: Partial<Proxy500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { proxy500Error.errorEscaped = n.getStringValue(); },
        "message": n => { proxy500Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { proxy500Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProxyPostRequestBody(proxyPostRequestBody: Partial<ProxyPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "authentication": n => { proxyPostRequestBody.authentication = n.getStringValue(); },
        "authType": n => { proxyPostRequestBody.authType = n.getStringValue(); },
        "clientId": n => { proxyPostRequestBody.clientId = n.getStringValue(); },
        "clientSecret": n => { proxyPostRequestBody.clientSecret = n.getStringValue(); },
        "grantType": n => { proxyPostRequestBody.grantType = n.getStringValue(); },
        "headersToProxy": n => { proxyPostRequestBody.headersToProxy = n.getCollectionOfPrimitiveValues<string>(); },
        "password": n => { proxyPostRequestBody.password = n.getStringValue(); },
        "targetBaseUrl": n => { proxyPostRequestBody.targetBaseUrl = n.getStringValue(); },
        "username": n => { proxyPostRequestBody.username = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProxyPostResponse(proxyPostResponse: Partial<ProxyPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "proxyId": n => { proxyPostResponse.proxyId = n.getStringValue(); },
    }
}
export interface Proxy400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface Proxy500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface ProxyPostRequestBody extends Parsable {
    /**
     * The authentication property
     */
    authentication?: string | null;
    /**
     * The authType property
     */
    authType?: string | null;
    /**
     * The clientId property
     */
    clientId?: string | null;
    /**
     * The clientSecret property
     */
    clientSecret?: string | null;
    /**
     * The grantType property
     */
    grantType?: string | null;
    /**
     * The headersToProxy property
     */
    headersToProxy?: string[] | null;
    /**
     * The password property
     */
    password?: string | null;
    /**
     * The targetBaseUrl property
     */
    targetBaseUrl?: string | null;
    /**
     * The username property
     */
    username?: string | null;
}
export interface ProxyPostResponse extends Parsable {
    /**
     * The proxyId property
     */
    proxyId?: string | null;
}
/**
 * Builds and executes requests for operations under /api/extensibility/tenants/{tenantId}/extensions/{extensionId}/proxy
 */
export interface ProxyRequestBuilder extends BaseRequestBuilder<ProxyRequestBuilder> {
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProxyPostResponse>}
     * @throws {Proxy400Error} error when the service returns a 400 status code
     * @throws {Proxy500Error} error when the service returns a 500 status code
     */
     post(body: ProxyPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ProxyPostResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ProxyPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProxy400Error(writer: SerializationWriter, proxy400Error: Partial<Proxy400Error> | undefined | null = {}) : void {
    if (proxy400Error) {
        writer.writeStringValue("error", proxy400Error.errorEscaped);
        writer.writeStringValue("message", proxy400Error.messageEscaped);
        writer.writeNumberValue("statusCode", proxy400Error.statusCode);
        writer.writeAdditionalData(proxy400Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProxy500Error(writer: SerializationWriter, proxy500Error: Partial<Proxy500Error> | undefined | null = {}) : void {
    if (proxy500Error) {
        writer.writeStringValue("error", proxy500Error.errorEscaped);
        writer.writeStringValue("message", proxy500Error.messageEscaped);
        writer.writeNumberValue("statusCode", proxy500Error.statusCode);
        writer.writeAdditionalData(proxy500Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProxyPostRequestBody(writer: SerializationWriter, proxyPostRequestBody: Partial<ProxyPostRequestBody> | undefined | null = {}) : void {
    if (proxyPostRequestBody) {
        writer.writeStringValue("authentication", proxyPostRequestBody.authentication);
        writer.writeStringValue("authType", proxyPostRequestBody.authType);
        writer.writeStringValue("clientId", proxyPostRequestBody.clientId);
        writer.writeStringValue("clientSecret", proxyPostRequestBody.clientSecret);
        writer.writeStringValue("grantType", proxyPostRequestBody.grantType);
        writer.writeCollectionOfPrimitiveValues<string>("headersToProxy", proxyPostRequestBody.headersToProxy);
        writer.writeStringValue("password", proxyPostRequestBody.password);
        writer.writeStringValue("targetBaseUrl", proxyPostRequestBody.targetBaseUrl);
        writer.writeStringValue("username", proxyPostRequestBody.username);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProxyPostResponse(writer: SerializationWriter, proxyPostResponse: Partial<ProxyPostResponse> | undefined | null = {}) : void {
    if (proxyPostResponse) {
        writer.writeStringValue("proxyId", proxyPostResponse.proxyId);
    }
}
/**
 * Uri template for the request builder.
 */
export const ProxyRequestBuilderUriTemplate = "{+baseurl}/api/extensibility/tenants/{tenantId}/extensions/{extensionId}/proxy";
/**
 * Metadata for all the requests in the request builder.
 */
export const ProxyRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ProxyRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createProxy400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createProxy500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createProxyPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProxyPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
