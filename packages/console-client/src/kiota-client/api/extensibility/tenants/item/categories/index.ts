/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Categories500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string;
    /**
     * The message property
     */
    messageEscaped?: string;
    /**
     * The statusCode property
     */
    statusCode?: number;
}
export interface CategoriesGetResponse extends Parsable {
    /**
     * The id property
     */
    id?: string;
    /**
     * The labelIntl property
     */
    labelIntl?: CategoriesGetResponse_labelIntl;
    /**
     * The locationId property
     */
    locationId?: string;
}
export interface CategoriesGetResponse_labelIntl extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Builds and executes requests for operations under /api/extensibility/tenants/{tenantId}/categories
 */
export interface CategoriesRequestBuilder extends BaseRequestBuilder<CategoriesRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CategoriesGetResponse>}
     * @throws {Categories500Error} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<CategoriesRequestBuilderGetQueryParameters> | undefined) : Promise<CategoriesGetResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CategoriesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
export interface CategoriesRequestBuilderGetQueryParameters {
    locationId?: string;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Categories500Error}
 */
export function createCategories500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCategories500Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CategoriesGetResponse_labelIntl}
 */
export function createCategoriesGetResponse_labelIntlFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCategoriesGetResponse_labelIntl;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CategoriesGetResponse}
 */
export function createCategoriesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCategoriesGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoCategories500Error(categories500Error: Partial<Categories500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { categories500Error.errorEscaped = n.getStringValue(); },
        "message": n => { categories500Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { categories500Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoCategoriesGetResponse(categoriesGetResponse: Partial<CategoriesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { categoriesGetResponse.id = n.getStringValue(); },
        "labelIntl": n => { categoriesGetResponse.labelIntl = n.getObjectValue<CategoriesGetResponse_labelIntl>(createCategoriesGetResponse_labelIntlFromDiscriminatorValue); },
        "locationId": n => { categoriesGetResponse.locationId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoCategoriesGetResponse_labelIntl(categoriesGetResponse_labelIntl: Partial<CategoriesGetResponse_labelIntl> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCategories500Error(writer: SerializationWriter, categories500Error: Partial<Categories500Error> | undefined = {}) : void {
    writer.writeStringValue("error", categories500Error.errorEscaped);
    writer.writeStringValue("message", categories500Error.messageEscaped);
    writer.writeNumberValue("statusCode", categories500Error.statusCode);
    writer.writeAdditionalData(categories500Error.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCategoriesGetResponse(writer: SerializationWriter, categoriesGetResponse: Partial<CategoriesGetResponse> | undefined = {}) : void {
    writer.writeStringValue("id", categoriesGetResponse.id);
    writer.writeObjectValue<CategoriesGetResponse_labelIntl>("labelIntl", categoriesGetResponse.labelIntl, serializeCategoriesGetResponse_labelIntl);
    writer.writeStringValue("locationId", categoriesGetResponse.locationId);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCategoriesGetResponse_labelIntl(writer: SerializationWriter, categoriesGetResponse_labelIntl: Partial<CategoriesGetResponse_labelIntl> | undefined = {}) : void {
    writer.writeAdditionalData(categoriesGetResponse_labelIntl.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const CategoriesRequestBuilderUriTemplate = "{+baseurl}/api/extensibility/tenants/{tenantId}/categories{?locationId*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const CategoriesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CategoriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            500: createCategories500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCategoriesGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
