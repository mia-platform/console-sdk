/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Bulk400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface Bulk500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
/**
 * Builds and executes requests for operations under /api/extensibility/tenants/{tenantId}/extensions/{extensionId}/{contextType}/activation/bulk
 */
export interface BulkRequestBuilder extends BaseRequestBuilder<BulkRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {Bulk400Error} error when the service returns a 400 status code
     * @throws {Bulk500Error} error when the service returns a 500 status code
     */
     delete(requestConfiguration?: RequestConfiguration<BulkRequestBuilderDeleteQueryParameters> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<BulkRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
}
export interface BulkRequestBuilderDeleteQueryParameters {
    contextIds?: string;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Bulk400Error}
 */
// @ts-ignore
export function createBulk400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBulk400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Bulk500Error}
 */
// @ts-ignore
export function createBulk500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBulk500Error;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBulk400Error(bulk400Error: Partial<Bulk400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { bulk400Error.errorEscaped = n.getStringValue(); },
        "message": n => { bulk400Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { bulk400Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBulk500Error(bulk500Error: Partial<Bulk500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { bulk500Error.errorEscaped = n.getStringValue(); },
        "message": n => { bulk500Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { bulk500Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBulk400Error(writer: SerializationWriter, bulk400Error: Partial<Bulk400Error> | undefined | null = {}) : void {
    if (bulk400Error) {
        writer.writeStringValue("error", bulk400Error.errorEscaped);
        writer.writeStringValue("message", bulk400Error.messageEscaped);
        writer.writeNumberValue("statusCode", bulk400Error.statusCode);
        writer.writeAdditionalData(bulk400Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBulk500Error(writer: SerializationWriter, bulk500Error: Partial<Bulk500Error> | undefined | null = {}) : void {
    if (bulk500Error) {
        writer.writeStringValue("error", bulk500Error.errorEscaped);
        writer.writeStringValue("message", bulk500Error.messageEscaped);
        writer.writeNumberValue("statusCode", bulk500Error.statusCode);
        writer.writeAdditionalData(bulk500Error.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const BulkRequestBuilderUriTemplate = "{+baseurl}/api/extensibility/tenants/{tenantId}/extensions/{extensionId}/{contextType}/activation/bulk{?contextIds*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const BulkRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: BulkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createBulk400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createBulk500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
};
/* tslint:enable */
/* eslint-enable */
