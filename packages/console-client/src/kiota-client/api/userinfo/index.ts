/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Userinfo400Error}
 */
// @ts-ignore
export function createUserinfo400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserinfo400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Userinfo401Error}
 */
// @ts-ignore
export function createUserinfo401ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserinfo401Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Userinfo500Error}
 */
// @ts-ignore
export function createUserinfo500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserinfo500Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserinfoGetResponse_metadata}
 */
// @ts-ignore
export function createUserinfoGetResponse_metadataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserinfoGetResponse_metadata;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserinfoGetResponse}
 */
// @ts-ignore
export function createUserinfoGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserinfoGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserinfo400Error(userinfo400Error: Partial<Userinfo400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { userinfo400Error.errorEscaped = n.getStringValue(); },
        "message": n => { userinfo400Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { userinfo400Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserinfo401Error(userinfo401Error: Partial<Userinfo401Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { userinfo401Error.description = n.getNumberValue(); },
        "message": n => { userinfo401Error.messageEscaped = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserinfo500Error(userinfo500Error: Partial<Userinfo500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { userinfo500Error.errorEscaped = n.getStringValue(); },
        "message": n => { userinfo500Error.messageEscaped = n.getStringValue(); },
        "statusCode": n => { userinfo500Error.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserinfoGetResponse(userinfoGetResponse: Partial<UserinfoGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { userinfoGetResponse.email = n.getStringValue(); },
        "groups": n => { userinfoGetResponse.groups = n.getCollectionOfPrimitiveValues<string>(); },
        "metadata": n => { userinfoGetResponse.metadata = n.getObjectValue<UserinfoGetResponse_metadata>(createUserinfoGetResponse_metadataFromDiscriminatorValue); },
        "name": n => { userinfoGetResponse.name = n.getStringValue(); },
        "permissions": n => { userinfoGetResponse.permissions = n.getCollectionOfPrimitiveValues<string>(); },
        "providerUserId": n => { userinfoGetResponse.providerUserId = n.getStringValue(); },
        "userId": n => { userinfoGetResponse.userId = n.getStringValue(); },
        "userSettingsURL": n => { userinfoGetResponse.userSettingsURL = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserinfoGetResponse_metadata(userinfoGetResponse_metadata: Partial<UserinfoGetResponse_metadata> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserinfo400Error(writer: SerializationWriter, userinfo400Error: Partial<Userinfo400Error> | undefined | null = {}) : void {
    if (userinfo400Error) {
        writer.writeStringValue("error", userinfo400Error.errorEscaped);
        writer.writeStringValue("message", userinfo400Error.messageEscaped);
        writer.writeNumberValue("statusCode", userinfo400Error.statusCode);
        writer.writeAdditionalData(userinfo400Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserinfo401Error(writer: SerializationWriter, userinfo401Error: Partial<Userinfo401Error> | undefined | null = {}) : void {
    if (userinfo401Error) {
        writer.writeNumberValue("description", userinfo401Error.description);
        writer.writeStringValue("message", userinfo401Error.messageEscaped);
        writer.writeAdditionalData(userinfo401Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserinfo500Error(writer: SerializationWriter, userinfo500Error: Partial<Userinfo500Error> | undefined | null = {}) : void {
    if (userinfo500Error) {
        writer.writeStringValue("error", userinfo500Error.errorEscaped);
        writer.writeStringValue("message", userinfo500Error.messageEscaped);
        writer.writeNumberValue("statusCode", userinfo500Error.statusCode);
        writer.writeAdditionalData(userinfo500Error.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserinfoGetResponse(writer: SerializationWriter, userinfoGetResponse: Partial<UserinfoGetResponse> | undefined | null = {}) : void {
    if (userinfoGetResponse) {
        writer.writeStringValue("email", userinfoGetResponse.email);
        writer.writeCollectionOfPrimitiveValues<string>("groups", userinfoGetResponse.groups);
        writer.writeObjectValue<UserinfoGetResponse_metadata>("metadata", userinfoGetResponse.metadata, serializeUserinfoGetResponse_metadata);
        writer.writeStringValue("name", userinfoGetResponse.name);
        writer.writeCollectionOfPrimitiveValues<string>("permissions", userinfoGetResponse.permissions);
        writer.writeStringValue("providerUserId", userinfoGetResponse.providerUserId);
        writer.writeStringValue("userId", userinfoGetResponse.userId);
        writer.writeStringValue("userSettingsURL", userinfoGetResponse.userSettingsURL);
        writer.writeAdditionalData(userinfoGetResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserinfoGetResponse_metadata(writer: SerializationWriter, userinfoGetResponse_metadata: Partial<UserinfoGetResponse_metadata> | undefined | null = {}) : void {
    if (userinfoGetResponse_metadata) {
        writer.writeAdditionalData(userinfoGetResponse_metadata.additionalData);
    }
}
export interface Userinfo400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface Userinfo401Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: number | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
}
export interface Userinfo500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: string | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface UserinfoGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The groups property
     */
    groups?: string[] | null;
    /**
     * The metadata property
     */
    metadata?: UserinfoGetResponse_metadata | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The permissions property
     */
    permissions?: string[] | null;
    /**
     * The providerUserId property
     */
    providerUserId?: string | null;
    /**
     * The userId property
     */
    userId?: string | null;
    /**
     * The userSettingsURL property
     */
    userSettingsURL?: string | null;
}
export interface UserinfoGetResponse_metadata extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Builds and executes requests for operations under /api/userinfo
 */
export interface UserinfoRequestBuilder extends BaseRequestBuilder<UserinfoRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserinfoGetResponse>}
     * @throws {Userinfo400Error} error when the service returns a 400 status code
     * @throws {Userinfo401Error} error when the service returns a 401 status code
     * @throws {Userinfo500Error} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UserinfoGetResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const UserinfoRequestBuilderUriTemplate = "{+baseurl}/api/userinfo";
/**
 * Metadata for all the requests in the request builder.
 */
export const UserinfoRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: UserinfoRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createUserinfo400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createUserinfo401ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createUserinfo500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserinfoGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
