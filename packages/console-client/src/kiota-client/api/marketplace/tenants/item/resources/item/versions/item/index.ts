/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMarketplaceItemFromDiscriminatorValue, createMarketplaceManifestFromDiscriminatorValue, deserializeIntoMarketplaceItem, deserializeIntoMarketplaceManifest, serializeMarketplaceItem, serializeMarketplaceManifest, type MarketplaceItem, type MarketplaceManifest } from '../../../../../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MarketplaceItem | MarketplaceManifest}
 */
// @ts-ignore
export function createWithVersionGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithVersionGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWithVersionGetResponse(withVersionGetResponse: Partial<MarketplaceItem | MarketplaceManifest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMarketplaceItem(withVersionGetResponse as MarketplaceItem),
        ...deserializeIntoMarketplaceManifest(withVersionGetResponse as MarketplaceManifest),
    }
}
export type GetFormatQueryParameterType = (typeof GetFormatQueryParameterTypeObject)[keyof typeof GetFormatQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWithVersionGetResponse(writer: SerializationWriter, withVersionGetResponse: Partial<MarketplaceItem | MarketplaceManifest> | undefined | null = {}) : void {
    serializeMarketplaceItem(writer, withVersionGetResponse as MarketplaceItem);
    serializeMarketplaceManifest(writer, withVersionGetResponse as MarketplaceManifest);
}
export type WithVersionGetResponse = MarketplaceItem | MarketplaceManifest;
/**
 * Builds and executes requests for operations under /api/marketplace/tenants/{tenantId}/resources/{itemId}/versions/{version}
 */
export interface WithVersionItemRequestBuilder extends BaseRequestBuilder<WithVersionItemRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MarketplaceItem | MarketplaceManifest>}
     */
     get(requestConfiguration?: RequestConfiguration<WithVersionItemRequestBuilderGetQueryParameters> | undefined) : Promise<MarketplaceItem | MarketplaceManifest | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WithVersionItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
export interface WithVersionItemRequestBuilderGetQueryParameters {
    /**
     * The format of the schema of the item returned
     */
    format?: GetFormatQueryParameterType;
}
/**
 * Uri template for the request builder.
 */
export const WithVersionItemRequestBuilderUriTemplate = "{+baseurl}/api/marketplace/tenants/{tenantId}/resources/{itemId}/versions/{version}{?format*}";
export const GetFormatQueryParameterTypeObject = {
    Manifest: "manifest",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const WithVersionItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithVersionItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WithVersionItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createWithVersionGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
