/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMarketplaceItemFromDiscriminatorValue, type MarketplaceItem } from '../../models/index.js';
// @ts-ignore
import { CategoriesRequestBuilderRequestsMetadata, type CategoriesRequestBuilder } from './categories/index.js';
// @ts-ignore
import { TenantsRequestBuilderNavigationMetadata, type TenantsRequestBuilder } from './tenants/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/marketplace
 */
export interface MarketplaceRequestBuilder extends BaseRequestBuilder<MarketplaceRequestBuilder> {
    /**
     * The categories property
     */
    get categories(): CategoriesRequestBuilder;
    /**
     * The tenants property
     */
    get tenants(): TenantsRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MarketplaceItem[]>}
     */
     get(requestConfiguration?: RequestConfiguration<MarketplaceRequestBuilderGetQueryParameters> | undefined) : Promise<MarketplaceItem[] | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MarketplaceRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
export interface MarketplaceRequestBuilderGetQueryParameters {
    /**
     * The Id of the Tenant for which to return both the public and private marketplace resources
     */
    includeTenantId?: string;
    /**
     * List of item URNs used to fetch only specific items, where the URN pattern is `urn:tenantId:mktp:itemId`. Each list element should be passed on a different query param (ie. itemUrns=urn1&itemUrns=unr2)
     */
    itemUrns?: string;
    /**
     * Size of the page to be downloaded
     */
    perPage?: number;
    publishOnMiaDocumentation?: boolean;
    /**
     * If true the returned items contain also the resources data as well as metadata
     */
    resolveResourcesData?: boolean;
    /**
     * The Id of the Tenant for which to filter the marketplace resources
     */
    tenantId?: string;
    /**
     * A comma separated string of marketplace types (e.g.: plugin,template,example,application)
     */
    types?: string;
}
/**
 * Uri template for the request builder.
 */
export const MarketplaceRequestBuilderUriTemplate = "{+baseurl}/api/marketplace{?includeTenantId*,itemUrns*,perPage*,publishOnMiaDocumentation*,resolveResourcesData*,tenantId*,types*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MarketplaceRequestBuilderNavigationMetadata: Record<Exclude<keyof MarketplaceRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    categories: {
        requestsMetadata: CategoriesRequestBuilderRequestsMetadata,
    },
    tenants: {
        navigationMetadata: TenantsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MarketplaceRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: MarketplaceRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createMarketplaceItemFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
