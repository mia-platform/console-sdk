/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCatalogItemFromDiscriminatorValue, createHttpErrorFromDiscriminatorValue, type CatalogItem, type HttpError } from '../../models/index.js';
// @ts-ignore
import { CategoriesRequestBuilderRequestsMetadata, type CategoriesRequestBuilder } from './categories/index.js';
// @ts-ignore
import { CustomResourceDefinitionsRequestBuilderRequestsMetadata, type CustomResourceDefinitionsRequestBuilder } from './customResourceDefinitions/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetSortQueryParameterType = (typeof GetSortQueryParameterTypeObject)[keyof typeof GetSortQueryParameterTypeObject];
/**
 * Builds and executes requests for operations under /api/marketplace
 */
export interface MarketplaceRequestBuilder extends BaseRequestBuilder<MarketplaceRequestBuilder> {
    /**
     * The categories property
     */
    get categories(): CategoriesRequestBuilder;
    /**
     * The customResourceDefinitions property
     */
    get customResourceDefinitions(): CustomResourceDefinitionsRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CatalogItem[]>}
     * @throws {HttpError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<MarketplaceRequestBuilderGetQueryParameters> | undefined) : Promise<CatalogItem[] | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MarketplaceRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
export interface MarketplaceRequestBuilderGetQueryParameters {
    /**
     * A comma-separated string of possible item visibilities: "public", "all-tenants", "private". It is mutually exclusive with "includeTenantId"
     */
    availableTo?: string;
    /**
     * A comma-separated string of possible item categories
     */
    category?: string;
    /**
     * The Id of the Tenant for which to return both the public and private marketplace resources. It is mutually exclusive with "availableTo"
     */
    includeTenantId?: string;
    /**
     * List of item URNs used to fetch only specific items, where the URN pattern is `urn:<<tenantId>>:mktp:<<itemId>>`, or `urn:<<tenantId>>:mktp:<<itemId>>?=version=<<version>>`. Each list element should be passed on a different query param (ie. itemUrns=urn1&itemUrns=urn2)
     */
    itemUrns?: string[];
    /**
     * A comma-separated string of possible item release stages: "coming-soon", "draft", "published", "maintenance", "deprecated", "archived"
     */
    lifecycleStatus?: string;
    /**
     * Regex for filtering items by name
     */
    name?: string;
    /**
     * Page number to be retrieved
     */
    page?: number;
    /**
     * Number of items per page. **Deprecated in favor of `perPage`**
     */
    per_page?: number;
    /**
     * Number of items per page
     */
    perPage?: number;
    publishOnMiaDocumentation?: boolean;
    /**
     * If true the returned items contain also the resources data as well as metadata
     */
    resolveResourcesData?: boolean;
    /**
     * The field to which sort results. Default sort is ascending, for descending order add a "-" before the field (e.g. -name).
     */
    sort?: GetSortQueryParameterType;
    /**
     * The Id of the Tenant for which to filter the marketplace resources
     */
    tenantId?: string;
    /**
     * A comma separated string of marketplace types (e.g.: plugin,template,example,application)
     */
    types?: string;
}
/**
 * Uri template for the request builder.
 */
export const MarketplaceRequestBuilderUriTemplate = "{+baseurl}/api/marketplace";
export const GetSortQueryParameterTypeObject = {
    Name: "name",
    Minus_name: "-name",
    Type: "type",
    Minus_type: "-type",
} as const;
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MarketplaceRequestBuilderNavigationMetadata: Record<Exclude<keyof MarketplaceRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    categories: {
        requestsMetadata: CategoriesRequestBuilderRequestsMetadata,
    },
    customResourceDefinitions: {
        requestsMetadata: CustomResourceDefinitionsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MarketplaceRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: MarketplaceRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createCatalogItemFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
