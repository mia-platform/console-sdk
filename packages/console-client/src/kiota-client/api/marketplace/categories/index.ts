/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Categories extends Parsable {
    /**
     * The categoryId property
     */
    categoryId?: string | null;
    /**
     * The label property
     */
    label?: string | null;
}
/**
 * Builds and executes requests for operations under /api/marketplace/categories
 */
export interface CategoriesRequestBuilder extends BaseRequestBuilder<CategoriesRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Categories[]>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Categories[] | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Categories}
 */
// @ts-ignore
export function createCategoriesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCategories;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCategories(categories: Partial<Categories> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "categoryId": n => { categories.categoryId = n.getStringValue(); },
        "label": n => { categories.label = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCategories(writer: SerializationWriter, categories: Partial<Categories> | undefined | null = {}) : void {
    if (categories) {
        writer.writeStringValue("categoryId", categories.categoryId);
        writer.writeStringValue("label", categories.label);
    }
}
/**
 * Uri template for the request builder.
 */
export const CategoriesRequestBuilderUriTemplate = "{+baseurl}/api/marketplace/categories";
/**
 * Metadata for all the requests in the request builder.
 */
export const CategoriesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CategoriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createCategoriesFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
