/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpErrorFromDiscriminatorValue, type HttpError } from '../../../../../models/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FilesPostResponse}
 */
// @ts-ignore
export function createFilesPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFilesPostResponse(filesPostResponse: Partial<FilesPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "file": n => { filesPostResponse.file = n.getStringValue(); },
        "_id": n => { filesPostResponse.id = n.getStringValue(); },
        "location": n => { filesPostResponse.location = n.getStringValue(); },
        "name": n => { filesPostResponse.name = n.getStringValue(); },
        "size": n => { filesPostResponse.size = n.getNumberValue(); },
    }
}
export interface FilesPostResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The file property
     */
    file?: string | null;
    /**
     * The _id property
     */
    id?: string | null;
    /**
     * The location property
     */
    location?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The size property
     */
    size?: number | null;
}
/**
 * Builds and executes requests for operations under /api/tenants/{tenantId}/marketplace/files
 */
export interface FilesRequestBuilder extends BaseRequestBuilder<FilesRequestBuilder> {
    /**
     * Uploads a Marketplace-related file
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FilesPostResponse>}
     * @throws {HttpError} error when the service returns a 4XX or 5XX status code
     */
     post(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FilesPostResponse | undefined>;
    /**
     * Uploads a Marketplace-related file
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFilesPostResponse(writer: SerializationWriter, filesPostResponse: Partial<FilesPostResponse> | undefined | null = {}) : void {
    if (filesPostResponse) {
        writer.writeStringValue("file", filesPostResponse.file);
        writer.writeStringValue("_id", filesPostResponse.id);
        writer.writeStringValue("location", filesPostResponse.location);
        writer.writeStringValue("name", filesPostResponse.name);
        writer.writeNumberValue("size", filesPostResponse.size);
        writer.writeAdditionalData(filesPostResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const FilesRequestBuilderUriTemplate = "{+baseurl}/api/tenants/{tenantId}/marketplace/files";
/**
 * Metadata for all the requests in the request builder.
 */
export const FilesRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: FilesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createHttpErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFilesPostResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
