name: Publish

on:
  push:
    tags:
      - '**'
  workflow_dispatch:

jobs:
  determine-publish-target:
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.check.outputs.target }}
      package_name: ${{ steps.check.outputs.package_name }}
    steps:
      - id: check
        run: |
          # We always always a tag in the form of `@owner/repo@version`.
          # If the tag has an invalid format this script will run into undefined behaviour.
          tag=$(echo "${{ github.ref_name }}" | awk -F'[@/]' '{print "@"$2"/"$3}')
          # write package_name to outputs
          echo "package_name=@mia-platform/$tag" >> $GITHUB_OUTPUT
          # write target to outputs
          if [ "$tag" = "@mia-platform/console-client-wc" ]; then
            echo "target=cdn" >> $GITHUB_OUTPUT
          else
            echo "target=npm" >> $GITHUB_OUTPUT
          fi

  publish-npm:
    name: Publish packages to NPM
    needs: determine-publish-target
    if: needs.determine-publish-target.outputs.target == 'npm'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
      - name: Build Monorepo and Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Post install always builds every package in the workspace
          pnpm i --frozen-lockfile
          pnpm --filter=${tag} publish --access public --no-git-checks

  publish-cdn:
    name: Publish to CDN
    needs: determine-publish-target
    if: needs.determine-publish-target.outputs.target == 'cdn'
    runs-on: ubuntu-latest
    env:
      CDN_STORAGE_ACCESS_KEY: ${{ secrets.CDN_STORAGE_ACCESS_KEY }}
    steps:
      - name: Build Package
        run: |
          pnpm i --frozen-lockfile
          pnpm --filter=${package_name} build

      - name: Install CDN Publish CLI
        run: pnpm add -g @mia-platform/cdn-publish
    
      - name: Publish
        run: cdn publish -p "packages/${package_name}" -k "$CDN_STORAGE_ACCESS_KEY" -s mia-platform
